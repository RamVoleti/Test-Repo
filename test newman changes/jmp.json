{
	"info": {
		"_postman_id": "7d30d621-58f2-4403-9dd5-f7ca81fb4204",
		"name": "JMP Basic E2E flow UAT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25266186"
	},
	"item": [
		{
			"name": "JMP-Order_FLow(COD)",
			"item": [
				{
					"name": "Create New Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('cookieVariable', pm.request.headers.get('cookie'));",
									"console.log(pm.request.headers.get('cookie'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Session Created Status-200\",  ()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"",
									"const jsonData=pm.response.json();",
									"pm.test(\"Session Created\",()=>{",
									"    pm.expect(jsonData.message).to.eql(\"Parent Session Created Successfully\");",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "_fw_crm_v=0b91841c-a365-41c5-d553-187626bd73c7; _ga=GA1.1.388600622.1683178419; x.session=s%3A7GXdHTVIbkIE-eo9HJPDBGdXYxl8ybyX.kPeKm0t4b9WeWIWshgL5Q1bms6%2B3bEcNk58PXvtVvWg; company_id=1; anonymous_id=24378df0cab2499fbb24d883244c953a; old_browser_anonymous_id=24378df0cab2499fbb24d883244c953a; app_location_details=%7B%22country%22%3A%22India%22%2C%22city%22%3A%22Kamothe%22%2C%22pincode%22%3A%22410210%22%7D; _ga_TNPTYH24B4=GS1.1.1690351545.161.1.1690351953.0.0.0; _dd_s=logs=1&id=1b6e092b-7e4c-43b8-829c-e2798f01aeab&created=1690351544798&expire=1690352886071; f.session=s%3AMcUUZc5HUITVNsRCo-goA7gy1tP6RVU9.Xm8ZSc2hPRkJeNhK365I%2BROfLuRP%2BrbncpqXVW68CgM"
							},
							{
								"key": "Origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/auth/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-fp-date",
								"value": "20230726T061306Z"
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2"
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:759d3eb35da2a4294e01927a633ab78f296ebda250e5e2bd630292d323ee9ede"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"63049be9ea3c70f3b4426efd\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/ext/jpm-mas/session/create",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"ext",
								"jpm-mas",
								"session",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart Info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = require('url');",
									"const querystring = require('querystring');",
									"const crypto = require('crypto-js');",
									"const sha256 = crypto.SHA256;",
									"const hmacSHA256 = crypto.HmacSHA256;",
									"",
									"",
									"",
									"function hmac(key, string, encoding) {",
									"    return hmacSHA256(string, key).toString();",
									"}",
									"",
									"function hash(string, encoding) {",
									"    return sha256(string).toString();",
									"}",
									"",
									"// This function assumes the string has already been percent encoded",
									"function encodeRfc3986(urlEncodedString) {",
									"    return urlEncodedString.replace(/[!'()*]/g, function(c) {",
									"        return '%' + c.charCodeAt(0).toString(16).toUpperCase()",
									"    });",
									"}",
									"",
									"function encodeRfc3986Full(str) {",
									"    return str;",
									"    // return encodeRfc3986(encodeURIComponent(str));",
									"}",
									"",
									"const HEADERS_TO_IGNORE = {",
									"    'authorization': true,",
									"    'connection': true,",
									"    'x-amzn-trace-id': true,",
									"    'user-agent': true,",
									"    'expect': true,",
									"    'presigned-expires': true,",
									"    'range': true,",
									"};",
									"",
									"const HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];",
									"",
									"// request: { path | body, [host], [method], [headers], [service], [region] }",
									"class RequestSigner {",
									"    constructor(request) {",
									"        if (typeof request === 'string') {",
									"            request = url.parse(request);",
									"        }",
									"",
									"        let headers = request.headers = (request.headers || {});",
									"        this.request = request;",
									"",
									"        if (!request.method && request.body) {",
									"            request.method = 'POST';",
									"        }",
									"",
									"        if (!headers.Host && !headers.host) {",
									"            headers.Host = request.hostname || request.host;",
									"",
									"            // If a port is specified explicitly, use it as is",
									"            if (request.port) {",
									"                headers.Host += ':' + request.port;",
									"            }",
									"        }",
									"        if (!request.hostname && !request.host) {",
									"            request.hostname = headers.Host || headers.host;",
									"        }",
									"    }",
									"",
									"    prepareRequest() {",
									"        this.parsePath();",
									"",
									"        let request = this.request;",
									"        let headers = request.headers;",
									"        let query;",
									"",
									"        if (request.signQuery) {",
									"",
									"            this.parsedPath.query = query = this.parsedPath.query || {};",
									"",
									"            if (query['x-fp-date']) {",
									"                this.datetime = query['x-fp-date'];",
									"            } else {",
									"                query['x-fp-date'] = this.getDateTime();",
									"            }",
									"        } else {",
									"",
									"            if (!request.doNotModifyHeaders) {",
									"                if (request.body && !headers['Content-Type'] && !headers['content-type']) {",
									"                    headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';",
									"                }",
									"",
									"                if (request.body && !headers['Content-Length'] && !headers['content-length']) {",
									"                    headers['Content-Length'] = Buffer.byteLength(request.body);",
									"                }",
									"",
									"                if (headers['x-fp-date']) {",
									"                    this.datetime = headers['x-fp-date'] || headers['x-fp-date'];",
									"                } else {",
									"                    headers['x-fp-date'] = this.getDateTime();",
									"                }",
									"            }",
									"",
									"            delete headers[\"x-fp-signature\"];",
									"            delete headers[\"X-Fp-Signature\"];",
									"        }",
									"    }",
									"",
									"    sign() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"        if (this.request.signQuery) {",
									"            this.parsedPath.query['x-fp-signature'] = this.signature();",
									"        } else {",
									"            this.request.headers['x-fp-signature'] = this.signature();",
									"        }",
									"",
									"        this.request.path = this.formatPath();",
									"        return this.request;",
									"    }",
									"",
									"    getDateTime() {",
									"        if (!this.datetime) {",
									"            let headers = this.request.headers;",
									"            let date = new Date(headers.Date || headers.date || new Date());",
									"",
									"            this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
									"        }",
									"        return this.datetime;",
									"    }",
									"",
									"    getDate() {",
									"        return this.getDateTime().substr(0, 8);",
									"    }",
									"",
									"    signature() {",
									"        let kCredentials = \"1234567\";",
									"        let strTosign = this.stringToSign();",
									"        // console.log(strTosign);",
									"        return `v1:${hmac(kCredentials, strTosign, 'hex')}`;",
									"    }",
									"",
									"    stringToSign() {",
									"        return [",
									"            this.getDateTime(),",
									"            hash(this.canonicalString(), 'hex'),",
									"        ].join('\\n');",
									"    }",
									"",
									"    canonicalString() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"",
									"        let pathStr = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"        let headers = this.request.headers;",
									"        let queryStr = '';",
									"        let normalizePath = true;",
									"        let decodePath = this.request.doNotEncodePath;",
									"        let decodeSlashesInPath = false;",
									"        let firstValOnly = false;",
									"        let bodyHash = hash(this.request.body || '', 'hex');",
									"",
									"        if (query) {",
									"            let reducedQuery = Object.keys(query).reduce(function(obj, key) {",
									"                if (!key) {",
									"                    return obj;",
									"                }",
									"                obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :",
									"                    (firstValOnly ? query[key][0] : query[key]);",
									"                return obj;",
									"            }, {});",
									"            let encodedQueryPieces = [];",
									"            Object.keys(reducedQuery).sort().forEach(function(key) {",
									"                if (!Array.isArray(reducedQuery[key])) {",
									"                    encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));",
									"                } else {",
									"                    reducedQuery[key].map(encodeRfc3986Full).sort()",
									"                        .forEach(function(val) {",
									"                            encodedQueryPieces.push(key + '=' + val);",
									"                        });",
									"                }",
									"            });",
									"            queryStr = encodedQueryPieces.join('&');",
									"        }",
									"        if (pathStr !== '/') {",
									"            if (normalizePath) {",
									"                pathStr = pathStr.replace(/\\/{2,}/g, '/');",
									"            }",
									"            pathStr = pathStr.split('/').reduce(function(path, piece) {",
									"                if (normalizePath && piece === '..') {",
									"                    path.pop();",
									"                } else if (!normalizePath || piece !== '.') {",
									"                    if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))",
									"                    path.push(encodeRfc3986Full(piece));",
									"                }",
									"                return path;",
									"            }, []).join('/');",
									"            if (pathStr[0] !== '/') pathStr = '/' + pathStr;",
									"            if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');",
									"        }",
									"",
									"        let canonicalReq = [",
									"            this.request.method || 'GET',",
									"            pathStr,",
									"            queryStr,",
									"            this.canonicalHeaders() + '\\n',",
									"            this.signedHeaders(),",
									"            bodyHash,",
									"        ].join('\\n');",
									"        return canonicalReq;",
									"    }",
									"",
									"    canonicalHeaders() {",
									"        let headers = this.request.headers;",
									"",
									"        function trimAll(header) {",
									"            return header.toString().trim().replace(/\\s+/g, ' ');",
									"        }",
									"        return Object.keys(headers)",
									"            .filter(function(key) {",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort(function(a, b) {",
									"                return a.toLowerCase() < b.toLowerCase() ? -1 : 1;",
									"            })",
									"            .map(function(key) {",
									"                return key.toLowerCase() + ':' + trimAll(headers[key]);",
									"            })",
									"            .join('\\n');",
									"    }",
									"",
									"    signedHeaders() {",
									"        return Object.keys(this.request.headers)",
									"            .map(function(key) {",
									"                return key.toLowerCase();",
									"            })",
									"            .filter(function(key) {",
									"",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort()",
									"            .join(';');",
									"    }",
									"",
									"    parsePath() {",
									"        let path = this.request.path || '/';",
									"",
									"        // So if there are non-reserved chars (and it's not already all % encoded), just encode them all",
									"        if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {",
									"            path = encodeURI(decodeURI(path))",
									"        }",
									"",
									"        let queryIx = path.indexOf('?');",
									"        let query = null;",
									"",
									"        if (queryIx >= 0) {",
									"            query = querystring.parse(path.slice(queryIx + 1));",
									"            path = path.slice(0, queryIx);",
									"        }",
									"",
									"        this.parsedPath = {",
									"            path: path,",
									"            query: query,",
									"        };",
									"    }",
									"",
									"    formatPath() {",
									"        let path = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"",
									"        if (!query) {",
									"            return path;",
									"        }",
									"",
									"        // Services don't support empty query string keys",
									"        if (query[''] != null) {",
									"            delete query[''];",
									"        }",
									"",
									"        return path + '?' + encodeRfc3986(querystring.stringify(query));",
									"    }",
									"}",
									"",
									"",
									"let signingOptions = {",
									"    method: pm.request.method.toUpperCase(),",
									"    host: pm.request.url.getHost(),",
									"    path: pm.request.url.getPathWithQuery(),",
									"    body: pm.request.body ? pm.request.body.toString() : null,",
									"    headers: pm.request.headers",
									"}",
									"",
									"let updatedReqData = new RequestSigner(signingOptions).sign();",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-date\",",
									"    value: updatedReqData.headers[\"x-fp-date\"]",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-signature\",",
									"    value: updatedReqData.headers[\"x-fp-signature\"]",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Cart ID-200\",  ()=>{",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"if(pm.response.code == 200){",
									"    pm.environment.set(\"cart-id\",pm.response.json().id)",
									"}",
									"",
									"const jsonData=pm.response.json();",
									"pm.test(\"Item parameter and type\",()=>{",
									"    pm.expect(jsonData).to.have.property(\"items\");",
									"    pm.expect(jsonData.items).to.be.an(\"array\");",
									"})",
									"",
									"pm.test(\"Cart Information\", () => {",
									"    if (jsonData.items.length === 0) {",
									"        pm.expect(jsonData.message).to.be.eql(\"No items in cart\");",
									"    } else {",
									"            pm.expect(jsonData.items[0].quantity).to.be.a(\"number\");",
									"        }",
									"});",
									"",
									"pm.environment.set('cookieVar', pm.request.headers.get('cookie'));",
									"console.log(pm.request.headers.get('cookie'))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"user-agent": true,
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Authorization",
								"value": "Bearer NjJkMDI1NDU2MGEzNTQ1NDFiY2E2MjdlOkZVc2plX1VRQQ=="
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Cookie",
								"value": "{{cookieVariable}}"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/bag"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-currency-code",
								"value": "INR",
								"disabled": true
							},
							{
								"key": "x-fp-date",
								"value": "20230726T061453Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:e97a2847dc043941ef750178fbc8ce4130051083a306e60a83496de8e338f310",
								"disabled": true
							},
							{
								"key": "x-location-detail",
								"value": "{\"country\":\"India\",\"city\":\"Kamothe\",\"pincode\":\"410210\",\"country_iso_code\":\"IND\"}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/ext/jpm-mas/api/cart/v1.0/detail?area_code=410210&b=true&i=true",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"ext",
								"jpm-mas",
								"api",
								"cart",
								"v1.0",
								"detail"
							],
							"query": [
								{
									"key": "area_code",
									"value": "410210"
								},
								{
									"key": "b",
									"value": "true"
								},
								{
									"key": "i",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = require('url');",
									"const querystring = require('querystring');",
									"const crypto = require('crypto-js');",
									"const sha256 = crypto.SHA256;",
									"const hmacSHA256 = crypto.HmacSHA256;",
									"let cart_id=pm.variables.get(\"cart-id\")",
									"pm.request.url.query.add('id='+cart_id);",
									"",
									"function hmac(key, string, encoding) {",
									"    return hmacSHA256(string, key).toString();",
									"}",
									"",
									"function hash(string, encoding) {",
									"    return sha256(string).toString();",
									"}",
									"",
									"// This function assumes the string has already been percent encoded",
									"function encodeRfc3986(urlEncodedString) {",
									"    return urlEncodedString.replace(/[!'()*]/g, function(c) {",
									"        return '%' + c.charCodeAt(0).toString(16).toUpperCase()",
									"    });",
									"}",
									"",
									"function encodeRfc3986Full(str) {",
									"    return str;",
									"    // return encodeRfc3986(encodeURIComponent(str));",
									"}",
									"",
									"const HEADERS_TO_IGNORE = {",
									"    'authorization': true,",
									"    'connection': true,",
									"    'x-amzn-trace-id': true,",
									"    'user-agent': true,",
									"    'expect': true,",
									"    'presigned-expires': true,",
									"    'range': true,",
									"};",
									"",
									"const HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];",
									"",
									"// request: { path | body, [host], [method], [headers], [service], [region] }",
									"class RequestSigner {",
									"    constructor(request) {",
									"        if (typeof request === 'string') {",
									"            request = url.parse(request);",
									"        }",
									"",
									"        let headers = request.headers = (request.headers || {});",
									"        this.request = request;",
									"",
									"        if (!request.method && request.body) {",
									"            request.method = 'POST';",
									"        }",
									"",
									"        if (!headers.Host && !headers.host) {",
									"            headers.Host = request.hostname || request.host;",
									"",
									"            // If a port is specified explicitly, use it as is",
									"            if (request.port) {",
									"                headers.Host += ':' + request.port;",
									"            }",
									"        }",
									"        if (!request.hostname && !request.host) {",
									"            request.hostname = headers.Host || headers.host;",
									"        }",
									"    }",
									"",
									"    prepareRequest() {",
									"        this.parsePath();",
									"",
									"        let request = this.request;",
									"        let headers = request.headers;",
									"        let query;",
									"",
									"        if (request.signQuery) {",
									"",
									"            this.parsedPath.query = query = this.parsedPath.query || {};",
									"",
									"            if (query['x-fp-date']) {",
									"                this.datetime = query['x-fp-date'];",
									"            } else {",
									"                query['x-fp-date'] = this.getDateTime();",
									"            }",
									"        } else {",
									"",
									"            if (!request.doNotModifyHeaders) {",
									"                if (request.body && !headers['Content-Type'] && !headers['content-type']) {",
									"                    headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';",
									"                }",
									"",
									"                if (request.body && !headers['Content-Length'] && !headers['content-length']) {",
									"                    headers['Content-Length'] = Buffer.byteLength(request.body);",
									"                }",
									"",
									"                if (headers['x-fp-date']) {",
									"                    this.datetime = headers['x-fp-date'] || headers['x-fp-date'];",
									"                } else {",
									"                    headers['x-fp-date'] = this.getDateTime();",
									"                }",
									"            }",
									"",
									"            delete headers[\"x-fp-signature\"];",
									"            delete headers[\"X-Fp-Signature\"];",
									"        }",
									"    }",
									"",
									"    sign() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"        if (this.request.signQuery) {",
									"            this.parsedPath.query['x-fp-signature'] = this.signature();",
									"        } else {",
									"            this.request.headers['x-fp-signature'] = this.signature();",
									"        }",
									"",
									"        this.request.path = this.formatPath();",
									"        return this.request;",
									"    }",
									"",
									"    getDateTime() {",
									"        if (!this.datetime) {",
									"            let headers = this.request.headers;",
									"            let date = new Date(headers.Date || headers.date || new Date());",
									"",
									"            this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
									"        }",
									"        return this.datetime;",
									"    }",
									"",
									"    getDate() {",
									"        return this.getDateTime().substr(0, 8);",
									"    }",
									"",
									"    signature() {",
									"        let kCredentials = \"1234567\";",
									"        let strTosign = this.stringToSign();",
									"        // console.log(strTosign);",
									"        return `v1:${hmac(kCredentials, strTosign, 'hex')}`;",
									"    }",
									"",
									"    stringToSign() {",
									"        return [",
									"            this.getDateTime(),",
									"            hash(this.canonicalString(), 'hex'),",
									"        ].join('\\n');",
									"    }",
									"",
									"    canonicalString() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"",
									"        let pathStr = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"        let headers = this.request.headers;",
									"        let queryStr = '';",
									"        let normalizePath = true;",
									"        let decodePath = this.request.doNotEncodePath;",
									"        let decodeSlashesInPath = false;",
									"        let firstValOnly = false;",
									"        let bodyHash = hash(this.request.body || '', 'hex');",
									"",
									"        if (query) {",
									"            let reducedQuery = Object.keys(query).reduce(function(obj, key) {",
									"                if (!key) {",
									"                    return obj;",
									"                }",
									"                obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :",
									"                    (firstValOnly ? query[key][0] : query[key]);",
									"                return obj;",
									"            }, {});",
									"            let encodedQueryPieces = [];",
									"            Object.keys(reducedQuery).sort().forEach(function(key) {",
									"                if (!Array.isArray(reducedQuery[key])) {",
									"                    encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));",
									"                } else {",
									"                    reducedQuery[key].map(encodeRfc3986Full).sort()",
									"                        .forEach(function(val) {",
									"                            encodedQueryPieces.push(key + '=' + val);",
									"                        });",
									"                }",
									"            });",
									"            queryStr = encodedQueryPieces.join('&');",
									"        }",
									"        if (pathStr !== '/') {",
									"            if (normalizePath) {",
									"                pathStr = pathStr.replace(/\\/{2,}/g, '/');",
									"            }",
									"            pathStr = pathStr.split('/').reduce(function(path, piece) {",
									"                if (normalizePath && piece === '..') {",
									"                    path.pop();",
									"                } else if (!normalizePath || piece !== '.') {",
									"                    if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))",
									"                    path.push(encodeRfc3986Full(piece));",
									"                }",
									"                return path;",
									"            }, []).join('/');",
									"            if (pathStr[0] !== '/') pathStr = '/' + pathStr;",
									"            if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');",
									"        }",
									"",
									"        let canonicalReq = [",
									"            this.request.method || 'GET',",
									"            pathStr,",
									"            queryStr,",
									"            this.canonicalHeaders() + '\\n',",
									"            this.signedHeaders(),",
									"            bodyHash,",
									"        ].join('\\n');",
									"        return canonicalReq;",
									"    }",
									"",
									"    canonicalHeaders() {",
									"        let headers = this.request.headers;",
									"",
									"        function trimAll(header) {",
									"            return header.toString().trim().replace(/\\s+/g, ' ');",
									"        }",
									"        return Object.keys(headers)",
									"            .filter(function(key) {",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort(function(a, b) {",
									"                return a.toLowerCase() < b.toLowerCase() ? -1 : 1;",
									"            })",
									"            .map(function(key) {",
									"                return key.toLowerCase() + ':' + trimAll(headers[key]);",
									"            })",
									"            .join('\\n');",
									"    }",
									"",
									"    signedHeaders() {",
									"        return Object.keys(this.request.headers)",
									"            .map(function(key) {",
									"                return key.toLowerCase();",
									"            })",
									"            .filter(function(key) {",
									"",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort()",
									"            .join(';');",
									"    }",
									"",
									"    parsePath() {",
									"        let path = this.request.path || '/';",
									"",
									"        // So if there are non-reserved chars (and it's not already all % encoded), just encode them all",
									"        if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {",
									"            path = encodeURI(decodeURI(path))",
									"        }",
									"",
									"        let queryIx = path.indexOf('?');",
									"        let query = null;",
									"",
									"        if (queryIx >= 0) {",
									"            query = querystring.parse(path.slice(queryIx + 1));",
									"            path = path.slice(0, queryIx);",
									"        }",
									"",
									"        this.parsedPath = {",
									"            path: path,",
									"            query: query,",
									"        };",
									"    }",
									"",
									"    formatPath() {",
									"        let path = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"",
									"        if (!query) {",
									"            return path;",
									"        }",
									"",
									"        // Services don't support empty query string keys",
									"        if (query[''] != null) {",
									"            delete query[''];",
									"        }",
									"",
									"        return path + '?' + encodeRfc3986(querystring.stringify(query));",
									"    }",
									"}",
									"",
									"",
									"let signingOptions = {",
									"    method: pm.request.method.toUpperCase(),",
									"    host: pm.request.url.getHost(),",
									"    path: pm.request.url.getPathWithQuery(),",
									"    body: pm.request.body ? pm.request.body.toString() : null,",
									"    headers: pm.request.headers",
									"}",
									"",
									"let updatedReqData = new RequestSigner(signingOptions).sign();",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-date\",",
									"    value: updatedReqData.headers[\"x-fp-date\"]",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-signature\",",
									"    value: updatedReqData.headers[\"x-fp-signature\"]",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add to Cart Status-200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"",
									"const jsonData=pm.response.json();",
									"pm.test(\"Product Added to Cart\",()=>{",
									"    pm.expect(jsonData.message).to.eql(\"Product has been added to cart\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "jiomart-partner.jmpx3.de"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "authorization",
								"value": "Bearer NjJkMDI1NDU2MGEzNTQ1NDFiY2E2MjdlOkZVc2plX1VRQQ=="
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "referer",
								"value": "https://jiomart-partner.jmpx3.de/product/johnsons-baby-oil-100-ml-gqu-_pbm8mw"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"115\", \"Chromium\";v=\"115\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
							},
							{
								"key": "x-currency-code",
								"value": "INR",
								"disabled": true
							},
							{
								"key": "x-fp-date",
								"value": "20230818T101853Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:5a499347d6f740b0bb5445f20ea44c0e9b6e015e75b066944789ca65e0cb67ac",
								"disabled": true
							},
							{
								"key": "x-location-detail",
								"value": "{\"country\":\"India\",\"city\":\"Kamothe\",\"pincode\":\"410210\",\"country_iso_code\":\"IND\"}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"items\":[{\"item_id\":7505006,\"item_size\":\"OS\",\"quantity\":1,\"article_assignment\":{\"level\":\"multi-companies\",\"strategy\":\"optimal\"},\"seller_id\":1,\"store_id\":1}]}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/api/service/application/cart/v1.0/detail",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"api",
								"service",
								"application",
								"cart",
								"v1.0",
								"detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Select Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Select Store Status-200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"",
									"const jsonData=pm.response.json();",
									"pm.test(\"Fetching & Selecting Stores\",()=>{",
									"    pm.expect(jsonData.message).to.eql(\"Stores Found\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "Origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/delivery?id=64c0b5d084d5567cc60e02b8"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-fp-date",
								"value": "20230726T061809Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:e32755a83135cf4937c53561962ad1d986ffb06bebd1b85302fdd018f65799e0",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\": 1,\n    \"merchant_id\": \"100001000235538\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/ext/jpm-mas/store/all",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"ext",
								"jpm-mas",
								"store",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Confirm Product Status-200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "Origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/delivery?id=64c0b5d084d5567cc60e02b8"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-fp-date",
								"value": "20230726T061919Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:39b950a4e6024cd6ee57d0ff1f9956ad101ba82e9a231a4dcbfc8aa284901aee",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"items\": [\n        7504846\n    ],\n    \"pincode\": \"410210\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/ext/infibeam/application/api/v1.0/min-max-mul",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"ext",
								"infibeam",
								"application",
								"api",
								"v1.0",
								"min-max-mul"
							]
						}
					},
					"response": []
				},
				{
					"name": "Select Address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = require('url');",
									"const querystring = require('querystring');",
									"const crypto = require('crypto-js');",
									"const sha256 = crypto.SHA256;",
									"const hmacSHA256 = crypto.HmacSHA256;",
									"",
									"let cart_id=pm.variables.get(\"cart-id\")",
									"pm.request.url.query.add('cart_id='+cart_id);",
									"",
									"let newp=pm.variables.get(\"cart-id\").toString();",
									"pm.request.body.update(JSON.stringify({",
									"    \"id\": \"646511c3c58116c4fe2903a7\",",
									"    \"billing_address_id\": \"645cc80523af899c5d2df8d4\",",
									"    \"cart_id\": newp",
									"}));",
									"console.log(pm.request.body)",
									"",
									"",
									"function hmac(key, string, encoding) {",
									"    return hmacSHA256(string, key).toString();",
									"}",
									"",
									"function hash(string, encoding) {",
									"    return sha256(string).toString();",
									"}",
									"",
									"// This function assumes the string has already been percent encoded",
									"function encodeRfc3986(urlEncodedString) {",
									"    return urlEncodedString.replace(/[!'()*]/g, function(c) {",
									"        return '%' + c.charCodeAt(0).toString(16).toUpperCase()",
									"    });",
									"}",
									"",
									"function encodeRfc3986Full(str) {",
									"    return str;",
									"    // return encodeRfc3986(encodeURIComponent(str));",
									"}",
									"",
									"const HEADERS_TO_IGNORE = {",
									"    'authorization': true,",
									"    'connection': true,",
									"    'x-amzn-trace-id': true,",
									"    'user-agent': true,",
									"    'expect': true,",
									"    'presigned-expires': true,",
									"    'range': true,",
									"};",
									"",
									"const HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];",
									"",
									"// request: { path | body, [host], [method], [headers], [service], [region] }",
									"class RequestSigner {",
									"    constructor(request) {",
									"        if (typeof request === 'string') {",
									"            request = url.parse(request);",
									"        }",
									"",
									"        let headers = request.headers = (request.headers || {});",
									"        this.request = request;",
									"",
									"        if (!request.method && request.body) {",
									"            request.method = 'POST';",
									"        }",
									"",
									"        if (!headers.Host && !headers.host) {",
									"            headers.Host = request.hostname || request.host;",
									"",
									"            // If a port is specified explicitly, use it as is",
									"            if (request.port) {",
									"                headers.Host += ':' + request.port;",
									"            }",
									"        }",
									"        if (!request.hostname && !request.host) {",
									"            request.hostname = headers.Host || headers.host;",
									"        }",
									"    }",
									"",
									"    prepareRequest() {",
									"        this.parsePath();",
									"",
									"        let request = this.request;",
									"        let headers = request.headers;",
									"        let query;",
									"",
									"        if (request.signQuery) {",
									"",
									"            this.parsedPath.query = query = this.parsedPath.query || {};",
									"",
									"            if (query['x-fp-date']) {",
									"                this.datetime = query['x-fp-date'];",
									"            } else {",
									"                query['x-fp-date'] = this.getDateTime();",
									"            }",
									"        } else {",
									"",
									"            if (!request.doNotModifyHeaders) {",
									"                if (request.body && !headers['Content-Type'] && !headers['content-type']) {",
									"                    headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';",
									"                }",
									"",
									"                if (request.body && !headers['Content-Length'] && !headers['content-length']) {",
									"                    headers['Content-Length'] = Buffer.byteLength(request.body);",
									"                }",
									"",
									"                if (headers['x-fp-date']) {",
									"                    this.datetime = headers['x-fp-date'] || headers['x-fp-date'];",
									"                } else {",
									"                    headers['x-fp-date'] = this.getDateTime();",
									"                }",
									"            }",
									"",
									"            delete headers[\"x-fp-signature\"];",
									"            delete headers[\"X-Fp-Signature\"];",
									"        }",
									"    }",
									"",
									"    sign() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"        if (this.request.signQuery) {",
									"            this.parsedPath.query['x-fp-signature'] = this.signature();",
									"        } else {",
									"            this.request.headers['x-fp-signature'] = this.signature();",
									"        }",
									"",
									"        this.request.path = this.formatPath();",
									"        return this.request;",
									"    }",
									"",
									"    getDateTime() {",
									"        if (!this.datetime) {",
									"            let headers = this.request.headers;",
									"            let date = new Date(headers.Date || headers.date || new Date());",
									"",
									"            this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
									"        }",
									"        return this.datetime;",
									"    }",
									"",
									"    getDate() {",
									"        return this.getDateTime().substr(0, 8);",
									"    }",
									"",
									"    signature() {",
									"        let kCredentials = \"1234567\";",
									"        let strTosign = this.stringToSign();",
									"        // console.log(strTosign);",
									"        return `v1:${hmac(kCredentials, strTosign, 'hex')}`;",
									"    }",
									"",
									"    stringToSign() {",
									"        return [",
									"            this.getDateTime(),",
									"            hash(this.canonicalString(), 'hex'),",
									"        ].join('\\n');",
									"    }",
									"",
									"    canonicalString() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"",
									"        let pathStr = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"        let headers = this.request.headers;",
									"        let queryStr = '';",
									"        let normalizePath = true;",
									"        let decodePath = this.request.doNotEncodePath;",
									"        let decodeSlashesInPath = false;",
									"        let firstValOnly = false;",
									"        let bodyHash = hash(this.request.body || '', 'hex');",
									"",
									"        if (query) {",
									"            let reducedQuery = Object.keys(query).reduce(function(obj, key) {",
									"                if (!key) {",
									"                    return obj;",
									"                }",
									"                obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :",
									"                    (firstValOnly ? query[key][0] : query[key]);",
									"                return obj;",
									"            }, {});",
									"            let encodedQueryPieces = [];",
									"            Object.keys(reducedQuery).sort().forEach(function(key) {",
									"                if (!Array.isArray(reducedQuery[key])) {",
									"                    encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));",
									"                } else {",
									"                    reducedQuery[key].map(encodeRfc3986Full).sort()",
									"                        .forEach(function(val) {",
									"                            encodedQueryPieces.push(key + '=' + val);",
									"                        });",
									"                }",
									"            });",
									"            queryStr = encodedQueryPieces.join('&');",
									"        }",
									"        if (pathStr !== '/') {",
									"            if (normalizePath) {",
									"                pathStr = pathStr.replace(/\\/{2,}/g, '/');",
									"            }",
									"            pathStr = pathStr.split('/').reduce(function(path, piece) {",
									"                if (normalizePath && piece === '..') {",
									"                    path.pop();",
									"                } else if (!normalizePath || piece !== '.') {",
									"                    if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))",
									"                    path.push(encodeRfc3986Full(piece));",
									"                }",
									"                return path;",
									"            }, []).join('/');",
									"            if (pathStr[0] !== '/') pathStr = '/' + pathStr;",
									"            if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');",
									"        }",
									"",
									"        let canonicalReq = [",
									"            this.request.method || 'GET',",
									"            pathStr,",
									"            queryStr,",
									"            this.canonicalHeaders() + '\\n',",
									"            this.signedHeaders(),",
									"            bodyHash,",
									"        ].join('\\n');",
									"        return canonicalReq;",
									"    }",
									"",
									"    canonicalHeaders() {",
									"        let headers = this.request.headers;",
									"",
									"        function trimAll(header) {",
									"            return header.toString().trim().replace(/\\s+/g, ' ');",
									"        }",
									"        return Object.keys(headers)",
									"            .filter(function(key) {",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort(function(a, b) {",
									"                return a.toLowerCase() < b.toLowerCase() ? -1 : 1;",
									"            })",
									"            .map(function(key) {",
									"                return key.toLowerCase() + ':' + trimAll(headers[key]);",
									"            })",
									"            .join('\\n');",
									"    }",
									"",
									"    signedHeaders() {",
									"        return Object.keys(this.request.headers)",
									"            .map(function(key) {",
									"                return key.toLowerCase();",
									"            })",
									"            .filter(function(key) {",
									"",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort()",
									"            .join(';');",
									"    }",
									"",
									"    parsePath() {",
									"        let path = this.request.path || '/';",
									"",
									"        // So if there are non-reserved chars (and it's not already all % encoded), just encode them all",
									"        if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {",
									"            path = encodeURI(decodeURI(path))",
									"        }",
									"",
									"        let queryIx = path.indexOf('?');",
									"        let query = null;",
									"",
									"        if (queryIx >= 0) {",
									"            query = querystring.parse(path.slice(queryIx + 1));",
									"            path = path.slice(0, queryIx);",
									"        }",
									"",
									"        this.parsedPath = {",
									"            path: path,",
									"            query: query,",
									"        };",
									"    }",
									"",
									"    formatPath() {",
									"        let path = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"",
									"        if (!query) {",
									"            return path;",
									"        }",
									"",
									"        // Services don't support empty query string keys",
									"        if (query[''] != null) {",
									"            delete query[''];",
									"        }",
									"",
									"        return path + '?' + encodeRfc3986(querystring.stringify(query));",
									"    }",
									"}",
									"",
									"",
									"let signingOptions = {",
									"    method: pm.request.method.toUpperCase(),",
									"    host: pm.request.url.getHost(),",
									"    path: pm.request.url.getPathWithQuery(),",
									"    body: pm.request.body ? pm.request.body.toString() : null,",
									"    headers: pm.request.headers",
									"}",
									"",
									"let updatedReqData = new RequestSigner(signingOptions).sign();",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-date\",",
									"    value: updatedReqData.headers[\"x-fp-date\"]",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-signature\",",
									"    value: updatedReqData.headers[\"x-fp-signature\"]",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Select Address Status-200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Authorization",
								"value": "Bearer NjJkMDI1NDU2MGEzNTQ1NDFiY2E2MjdlOkZVc2plX1VRQQ=="
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "Origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/delivery?id=64c0b5d084d5567cc60e02b8"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-currency-code",
								"value": "INR",
								"disabled": true
							},
							{
								"key": "x-fp-date",
								"value": "20230726T062000Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:36d29e9678de789d2a14f1e0618956c45f4f76d8429a71bde2862a10f4a269b3",
								"disabled": true
							},
							{
								"key": "x-location-detail",
								"value": "{\"country\":\"India\",\"city\":\"Kamothe\",\"pincode\":\"410210\",\"country_iso_code\":\"IND\"}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"646511c3c58116c4fe2903a7\",\n    \"billing_address_id\": \"645cc80523af899c5d2df8d4\",\n    \"cart_id\": \"64c0b5d084d5567cc60e02b8\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/api/service/application/cart/v1.0/select-address",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"api",
								"service",
								"application",
								"cart",
								"v1.0",
								"select-address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Select COD MOP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = require('url');",
									"const querystring = require('querystring');",
									"const crypto = require('crypto-js');",
									"const sha256 = crypto.SHA256;",
									"const hmacSHA256 = crypto.HmacSHA256;",
									"let cart_id=pm.variables.get(\"cart-id\")",
									"pm.request.url.query.add('id='+cart_id);",
									"let newp=pm.variables.get(\"cart-id\").toString();",
									"pm.request.body.update(JSON.stringify({",
									"    \"disable_coupon_validation\": false,",
									"    \"payment_mode\": \"COD\",",
									"    \"payment_identifier\": \"COD\",",
									"    \"aggregator_name\": \"Fynd\",",
									"    \"merchant_code\": \"COD\",",
									"    \"id\": newp",
									"}));",
									"",
									"function hmac(key, string, encoding) {",
									"    return hmacSHA256(string, key).toString();",
									"}",
									"",
									"function hash(string, encoding) {",
									"    return sha256(string).toString();",
									"}",
									"",
									"// This function assumes the string has already been percent encoded",
									"function encodeRfc3986(urlEncodedString) {",
									"    return urlEncodedString.replace(/[!'()*]/g, function(c) {",
									"        return '%' + c.charCodeAt(0).toString(16).toUpperCase()",
									"    });",
									"}",
									"",
									"function encodeRfc3986Full(str) {",
									"    return str;",
									"    // return encodeRfc3986(encodeURIComponent(str));",
									"}",
									"",
									"const HEADERS_TO_IGNORE = {",
									"    'authorization': true,",
									"    'connection': true,",
									"    'x-amzn-trace-id': true,",
									"    'user-agent': true,",
									"    'expect': true,",
									"    'presigned-expires': true,",
									"    'range': true,",
									"};",
									"",
									"const HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];",
									"",
									"// request: { path | body, [host], [method], [headers], [service], [region] }",
									"class RequestSigner {",
									"    constructor(request) {",
									"        if (typeof request === 'string') {",
									"            request = url.parse(request);",
									"        }",
									"",
									"        let headers = request.headers = (request.headers || {});",
									"        this.request = request;",
									"",
									"        if (!request.method && request.body) {",
									"            request.method = 'POST';",
									"        }",
									"",
									"        if (!headers.Host && !headers.host) {",
									"            headers.Host = request.hostname || request.host;",
									"",
									"            // If a port is specified explicitly, use it as is",
									"            if (request.port) {",
									"                headers.Host += ':' + request.port;",
									"            }",
									"        }",
									"        if (!request.hostname && !request.host) {",
									"            request.hostname = headers.Host || headers.host;",
									"        }",
									"    }",
									"",
									"    prepareRequest() {",
									"        this.parsePath();",
									"",
									"        let request = this.request;",
									"        let headers = request.headers;",
									"        let query;",
									"",
									"        if (request.signQuery) {",
									"",
									"            this.parsedPath.query = query = this.parsedPath.query || {};",
									"",
									"            if (query['x-fp-date']) {",
									"                this.datetime = query['x-fp-date'];",
									"            } else {",
									"                query['x-fp-date'] = this.getDateTime();",
									"            }",
									"        } else {",
									"",
									"            if (!request.doNotModifyHeaders) {",
									"                if (request.body && !headers['Content-Type'] && !headers['content-type']) {",
									"                    headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';",
									"                }",
									"",
									"                if (request.body && !headers['Content-Length'] && !headers['content-length']) {",
									"                    headers['Content-Length'] = Buffer.byteLength(request.body);",
									"                }",
									"",
									"                if (headers['x-fp-date']) {",
									"                    this.datetime = headers['x-fp-date'] || headers['x-fp-date'];",
									"                } else {",
									"                    headers['x-fp-date'] = this.getDateTime();",
									"                }",
									"            }",
									"",
									"            delete headers[\"x-fp-signature\"];",
									"            delete headers[\"X-Fp-Signature\"];",
									"        }",
									"    }",
									"",
									"    sign() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"        if (this.request.signQuery) {",
									"            this.parsedPath.query['x-fp-signature'] = this.signature();",
									"        } else {",
									"            this.request.headers['x-fp-signature'] = this.signature();",
									"        }",
									"",
									"        this.request.path = this.formatPath();",
									"        return this.request;",
									"    }",
									"",
									"    getDateTime() {",
									"        if (!this.datetime) {",
									"            let headers = this.request.headers;",
									"            let date = new Date(headers.Date || headers.date || new Date());",
									"",
									"            this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
									"        }",
									"        return this.datetime;",
									"    }",
									"",
									"    getDate() {",
									"        return this.getDateTime().substr(0, 8);",
									"    }",
									"",
									"    signature() {",
									"        let kCredentials = \"1234567\";",
									"        let strTosign = this.stringToSign();",
									"        // console.log(strTosign);",
									"        return `v1:${hmac(kCredentials, strTosign, 'hex')}`;",
									"    }",
									"",
									"    stringToSign() {",
									"        return [",
									"            this.getDateTime(),",
									"            hash(this.canonicalString(), 'hex'),",
									"        ].join('\\n');",
									"    }",
									"",
									"    canonicalString() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"",
									"        let pathStr = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"        let headers = this.request.headers;",
									"        let queryStr = '';",
									"        let normalizePath = true;",
									"        let decodePath = this.request.doNotEncodePath;",
									"        let decodeSlashesInPath = false;",
									"        let firstValOnly = false;",
									"        let bodyHash = hash(this.request.body || '', 'hex');",
									"",
									"        if (query) {",
									"            let reducedQuery = Object.keys(query).reduce(function(obj, key) {",
									"                if (!key) {",
									"                    return obj;",
									"                }",
									"                obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :",
									"                    (firstValOnly ? query[key][0] : query[key]);",
									"                return obj;",
									"            }, {});",
									"            let encodedQueryPieces = [];",
									"            Object.keys(reducedQuery).sort().forEach(function(key) {",
									"                if (!Array.isArray(reducedQuery[key])) {",
									"                    encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));",
									"                } else {",
									"                    reducedQuery[key].map(encodeRfc3986Full).sort()",
									"                        .forEach(function(val) {",
									"                            encodedQueryPieces.push(key + '=' + val);",
									"                        });",
									"                }",
									"            });",
									"            queryStr = encodedQueryPieces.join('&');",
									"        }",
									"        if (pathStr !== '/') {",
									"            if (normalizePath) {",
									"                pathStr = pathStr.replace(/\\/{2,}/g, '/');",
									"            }",
									"            pathStr = pathStr.split('/').reduce(function(path, piece) {",
									"                if (normalizePath && piece === '..') {",
									"                    path.pop();",
									"                } else if (!normalizePath || piece !== '.') {",
									"                    if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))",
									"                    path.push(encodeRfc3986Full(piece));",
									"                }",
									"                return path;",
									"            }, []).join('/');",
									"            if (pathStr[0] !== '/') pathStr = '/' + pathStr;",
									"            if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');",
									"        }",
									"",
									"        let canonicalReq = [",
									"            this.request.method || 'GET',",
									"            pathStr,",
									"            queryStr,",
									"            this.canonicalHeaders() + '\\n',",
									"            this.signedHeaders(),",
									"            bodyHash,",
									"        ].join('\\n');",
									"        return canonicalReq;",
									"    }",
									"",
									"    canonicalHeaders() {",
									"        let headers = this.request.headers;",
									"",
									"        function trimAll(header) {",
									"            return header.toString().trim().replace(/\\s+/g, ' ');",
									"        }",
									"        return Object.keys(headers)",
									"            .filter(function(key) {",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort(function(a, b) {",
									"                return a.toLowerCase() < b.toLowerCase() ? -1 : 1;",
									"            })",
									"            .map(function(key) {",
									"                return key.toLowerCase() + ':' + trimAll(headers[key]);",
									"            })",
									"            .join('\\n');",
									"    }",
									"",
									"    signedHeaders() {",
									"        return Object.keys(this.request.headers)",
									"            .map(function(key) {",
									"                return key.toLowerCase();",
									"            })",
									"            .filter(function(key) {",
									"",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort()",
									"            .join(';');",
									"    }",
									"",
									"    parsePath() {",
									"        let path = this.request.path || '/';",
									"",
									"        // So if there are non-reserved chars (and it's not already all % encoded), just encode them all",
									"        if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {",
									"            path = encodeURI(decodeURI(path))",
									"        }",
									"",
									"        let queryIx = path.indexOf('?');",
									"        let query = null;",
									"",
									"        if (queryIx >= 0) {",
									"            query = querystring.parse(path.slice(queryIx + 1));",
									"            path = path.slice(0, queryIx);",
									"        }",
									"",
									"        this.parsedPath = {",
									"            path: path,",
									"            query: query,",
									"        };",
									"    }",
									"",
									"    formatPath() {",
									"        let path = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"",
									"        if (!query) {",
									"            return path;",
									"        }",
									"",
									"        // Services don't support empty query string keys",
									"        if (query[''] != null) {",
									"            delete query[''];",
									"        }",
									"",
									"        return path + '?' + encodeRfc3986(querystring.stringify(query));",
									"    }",
									"}",
									"",
									"",
									"let signingOptions = {",
									"    method: pm.request.method.toUpperCase(),",
									"    host: pm.request.url.getHost(),",
									"    path: pm.request.url.getPathWithQuery(),",
									"    body: pm.request.body ? pm.request.body.toString() : null,",
									"    headers: pm.request.headers",
									"}",
									"",
									"let updatedReqData = new RequestSigner(signingOptions).sign();",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-date\",",
									"    value: updatedReqData.headers[\"x-fp-date\"]",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-signature\",",
									"    value: updatedReqData.headers[\"x-fp-signature\"]",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Select COD MOP Status-200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Authorization",
								"value": "Bearer NjJkMDI1NDU2MGEzNTQ1NDFiY2E2MjdlOkZVc2plX1VRQQ=="
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "Origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "Referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/payment-info?billing_address_id=645cc80523af899c5d2df8d4&cart_id=64c0b5d084d5567cc60e02b8&address_id=646511c3c58116c4fe2903a7"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-currency-code",
								"value": "INR",
								"disabled": true
							},
							{
								"key": "x-fp-date",
								"value": "20230726T062404Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:4e2aa97fc1bfe58e9248f85e3dd98c89ca10527e91eaa63fde06a51931d9c9df",
								"disabled": true
							},
							{
								"key": "x-location-detail",
								"value": "{\"country\":\"India\",\"city\":\"Kamothe\",\"pincode\":\"410210\",\"country_iso_code\":\"IND\"}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"disable_coupon_validation\": false,\n    \"payment_mode\": \"COD\",\n    \"payment_identifier\": \"COD\",\n    \"aggregator_name\": \"Fynd\",\n    \"merchant_code\": \"COD\",\n    \"id\": \"64c0b5d084d5567cc60e02b8\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/api/service/application/cart/v1.0/payment",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"api",
								"service",
								"application",
								"cart",
								"v1.0",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checkout COD Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = require('url');",
									"const querystring = require('querystring');",
									"const crypto = require('crypto-js');",
									"const sha256 = crypto.SHA256;",
									"const hmacSHA256 = crypto.HmacSHA256;",
									"",
									"",
									"let newp=pm.variables.get(\"cart-id\").toString();",
									"pm.request.body.update(JSON.stringify({",
									"    \"address_id\": \"646511c3c58116c4fe2903a7\",",
									"    \"billing_address_id\": \"645cc80523af899c5d2df8d4\",",
									"    \"aggregator\": \"Fynd\",",
									"    \"payment_mode\": \"COD\",",
									"    \"meta\": {",
									"        \"id\": \"63049be9ea3c70f3b4426efd\",",
									"        \"business_details\": {",
									"            \"is_completed\": true,",
									"            \"business_category\": \"9110\",",
									"            \"gst\": {",
									"                \"gst_type\": \"unregistered\",",
									"                \"gst_num\": \"\"",
									"            },",
									"            \"business_type\": \"100\",",
									"            \"business_address\": {",
									"                \"line1\": \"GALA NO 230\",",
									"                \"line2\": \"Thane Thane\",",
									"                \"pincode\": \"421303\",",
									"                \"district\": \"Thane\",",
									"                \"state\": \"MAHARASHTRA\",",
									"                \"state_code\": \"MH\",",
									"                \"address_id\": \"63073268de9eb1bed87869dc\",",
									"                \"latitude\": \"12.9662976\",",
									"                \"longitude\": \"77.545472\"",
									"            },",
									"            \"business_legal_name\": \"SAPANA POLYWEAVE PVT LTD\",",
									"            \"business_shop_name\": \"SAPANA POLYWEAVE PVT LTD\",",
									"            \"mcc_code\": \"5812\",",
									"            \"pan_num\": \"BLSPD1600D\"",
									"        },",
									"        \"personal_details\": {",
									"            \"is_completed\": true,",
									"            \"first_name\": \"Varsha\",",
									"            \"last_name\": \"V\",",
									"            \"dob\": \"1995-01-09T00:00:00.000Z\",",
									"            \"residential_address\": {",
									"                \"line1\": \"Bus stop\",",
									"                \"line2\": \"Bus stop\",",
									"                \"pincode\": \"410210\",",
									"                \"district\": \"Navi Mumbai\",",
									"                \"state\": \"MAHARASHTRA\"",
									"            },",
									"            \"referred_by\": {",
									"                \"referred_type\": \"self\"",
									"            },",
									"            \"email\": \"varshavishwanath@gofynd.com\",",
									"            \"is_email_verified\": false,",
									"            \"merchant_account_details\": {",
									"                \"AccountNumber\": null,",
									"                \"IfscCode\": null,",
									"                \"BeneName\": null",
									"            },",
									"            \"phone\": {",
									"                \"country_code\": \"91\",",
									"                \"phone_number\": \"9148499899\"",
									"            }",
									"        },",
									"        \"merchant_id\": \"100001000235538\",",
									"        \"terminal_id\": \"10250904\",",
									"        \"delivery_slots\": [",
									"            {",
									"                \"shipment_id\": \"1690529739341\",",
									"                \"fc_id\": 337,",
									"                \"slot_id\": \"R614-DEFAULT-DEFAULT-10:00-12:00\",",
									"                \"duration\": {",
									"                    \"from\": \"10:00\",",
									"                    \"to\": \"12:00\"",
									"                },",
									"                \"hub_id\": \"R614\",",
									"                \"delivery_zone\": null,",
									"                \"pdd\": \"2023-07-29\"",
									"            }",
									"        ]",
									"    },",
									"    \"id\": newp,",
									"    \"custom_meta\": [",
									"        {",
									"            \"key\": \"store_id\",",
									"            \"value\": \"645cc80551e9f5e164fd397d\"",
									"        },",
									"        {",
									"            \"key\": \"store_name\",",
									"            \"value\": \"Pooja's cafe\"",
									"        }",
									"    ],",
									"    \"payment_identifier\": \"COD\"",
									"}));",
									"",
									"function hmac(key, string, encoding) {",
									"    return hmacSHA256(string, key).toString();",
									"}",
									"",
									"function hash(string, encoding) {",
									"    return sha256(string).toString();",
									"}",
									"",
									"// This function assumes the string has already been percent encoded",
									"function encodeRfc3986(urlEncodedString) {",
									"    return urlEncodedString.replace(/[!'()*]/g, function(c) {",
									"        return '%' + c.charCodeAt(0).toString(16).toUpperCase()",
									"    });",
									"}",
									"",
									"function encodeRfc3986Full(str) {",
									"    return str;",
									"    // return encodeRfc3986(encodeURIComponent(str));",
									"}",
									"",
									"const HEADERS_TO_IGNORE = {",
									"    'authorization': true,",
									"    'connection': true,",
									"    'x-amzn-trace-id': true,",
									"    'user-agent': true,",
									"    'expect': true,",
									"    'presigned-expires': true,",
									"    'range': true,",
									"};",
									"",
									"const HEADERS_TO_INCLUDE = [\"x\\-fp\\-.*\", \"host\"];",
									"",
									"// request: { path | body, [host], [method], [headers], [service], [region] }",
									"class RequestSigner {",
									"    constructor(request) {",
									"        if (typeof request === 'string') {",
									"            request = url.parse(request);",
									"        }",
									"",
									"        let headers = request.headers = (request.headers || {});",
									"        this.request = request;",
									"",
									"        if (!request.method && request.body) {",
									"            request.method = 'POST';",
									"        }",
									"",
									"        if (!headers.Host && !headers.host) {",
									"            headers.Host = request.hostname || request.host;",
									"",
									"            // If a port is specified explicitly, use it as is",
									"            if (request.port) {",
									"                headers.Host += ':' + request.port;",
									"            }",
									"        }",
									"        if (!request.hostname && !request.host) {",
									"            request.hostname = headers.Host || headers.host;",
									"        }",
									"    }",
									"",
									"    prepareRequest() {",
									"        this.parsePath();",
									"",
									"        let request = this.request;",
									"        let headers = request.headers;",
									"        let query;",
									"",
									"        if (request.signQuery) {",
									"",
									"            this.parsedPath.query = query = this.parsedPath.query || {};",
									"",
									"            if (query['x-fp-date']) {",
									"                this.datetime = query['x-fp-date'];",
									"            } else {",
									"                query['x-fp-date'] = this.getDateTime();",
									"            }",
									"        } else {",
									"",
									"            if (!request.doNotModifyHeaders) {",
									"                if (request.body && !headers['Content-Type'] && !headers['content-type']) {",
									"                    headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';",
									"                }",
									"",
									"                if (request.body && !headers['Content-Length'] && !headers['content-length']) {",
									"                    headers['Content-Length'] = Buffer.byteLength(request.body);",
									"                }",
									"",
									"                if (headers['x-fp-date']) {",
									"                    this.datetime = headers['x-fp-date'] || headers['x-fp-date'];",
									"                } else {",
									"                    headers['x-fp-date'] = this.getDateTime();",
									"                }",
									"            }",
									"",
									"            delete headers[\"x-fp-signature\"];",
									"            delete headers[\"X-Fp-Signature\"];",
									"        }",
									"    }",
									"",
									"    sign() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"        if (this.request.signQuery) {",
									"            this.parsedPath.query['x-fp-signature'] = this.signature();",
									"        } else {",
									"            this.request.headers['x-fp-signature'] = this.signature();",
									"        }",
									"",
									"        this.request.path = this.formatPath();",
									"        return this.request;",
									"    }",
									"",
									"    getDateTime() {",
									"        if (!this.datetime) {",
									"            let headers = this.request.headers;",
									"            let date = new Date(headers.Date || headers.date || new Date());",
									"",
									"            this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
									"        }",
									"        return this.datetime;",
									"    }",
									"",
									"    getDate() {",
									"        return this.getDateTime().substr(0, 8);",
									"    }",
									"",
									"    signature() {",
									"        let kCredentials = \"1234567\";",
									"        let strTosign = this.stringToSign();",
									"        // console.log(strTosign);",
									"        return `v1:${hmac(kCredentials, strTosign, 'hex')}`;",
									"    }",
									"",
									"    stringToSign() {",
									"        return [",
									"            this.getDateTime(),",
									"            hash(this.canonicalString(), 'hex'),",
									"        ].join('\\n');",
									"    }",
									"",
									"    canonicalString() {",
									"        if (!this.parsedPath) {",
									"            this.prepareRequest();",
									"        }",
									"",
									"        let pathStr = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"        let headers = this.request.headers;",
									"        let queryStr = '';",
									"        let normalizePath = true;",
									"        let decodePath = this.request.doNotEncodePath;",
									"        let decodeSlashesInPath = false;",
									"        let firstValOnly = false;",
									"        let bodyHash = hash(this.request.body || '', 'hex');",
									"",
									"        if (query) {",
									"            let reducedQuery = Object.keys(query).reduce(function(obj, key) {",
									"                if (!key) {",
									"                    return obj;",
									"                }",
									"                obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :",
									"                    (firstValOnly ? query[key][0] : query[key]);",
									"                return obj;",
									"            }, {});",
									"            let encodedQueryPieces = [];",
									"            Object.keys(reducedQuery).sort().forEach(function(key) {",
									"                if (!Array.isArray(reducedQuery[key])) {",
									"                    encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));",
									"                } else {",
									"                    reducedQuery[key].map(encodeRfc3986Full).sort()",
									"                        .forEach(function(val) {",
									"                            encodedQueryPieces.push(key + '=' + val);",
									"                        });",
									"                }",
									"            });",
									"            queryStr = encodedQueryPieces.join('&');",
									"        }",
									"        if (pathStr !== '/') {",
									"            if (normalizePath) {",
									"                pathStr = pathStr.replace(/\\/{2,}/g, '/');",
									"            }",
									"            pathStr = pathStr.split('/').reduce(function(path, piece) {",
									"                if (normalizePath && piece === '..') {",
									"                    path.pop();",
									"                } else if (!normalizePath || piece !== '.') {",
									"                    if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))",
									"                    path.push(encodeRfc3986Full(piece));",
									"                }",
									"                return path;",
									"            }, []).join('/');",
									"            if (pathStr[0] !== '/') pathStr = '/' + pathStr;",
									"            if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');",
									"        }",
									"",
									"        let canonicalReq = [",
									"            this.request.method || 'GET',",
									"            pathStr,",
									"            queryStr,",
									"            this.canonicalHeaders() + '\\n',",
									"            this.signedHeaders(),",
									"            bodyHash,",
									"        ].join('\\n');",
									"        return canonicalReq;",
									"    }",
									"",
									"    canonicalHeaders() {",
									"        let headers = this.request.headers;",
									"",
									"        function trimAll(header) {",
									"            return header.toString().trim().replace(/\\s+/g, ' ');",
									"        }",
									"        return Object.keys(headers)",
									"            .filter(function(key) {",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort(function(a, b) {",
									"                return a.toLowerCase() < b.toLowerCase() ? -1 : 1;",
									"            })",
									"            .map(function(key) {",
									"                return key.toLowerCase() + ':' + trimAll(headers[key]);",
									"            })",
									"            .join('\\n');",
									"    }",
									"",
									"    signedHeaders() {",
									"        return Object.keys(this.request.headers)",
									"            .map(function(key) {",
									"                return key.toLowerCase();",
									"            })",
									"            .filter(function(key) {",
									"",
									"                let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;",
									"                if (notInIgnoreHeader) {",
									"                    let foundMatch = false;",
									"                    for (let t in HEADERS_TO_INCLUDE) {",
									"                        foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], \"ig\").test(key);",
									"                    }",
									"                    return foundMatch;",
									"                } else {",
									"                    return false;",
									"                }",
									"            })",
									"            .sort()",
									"            .join(';');",
									"    }",
									"",
									"    parsePath() {",
									"        let path = this.request.path || '/';",
									"",
									"        // So if there are non-reserved chars (and it's not already all % encoded), just encode them all",
									"        if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {",
									"            path = encodeURI(decodeURI(path))",
									"        }",
									"",
									"        let queryIx = path.indexOf('?');",
									"        let query = null;",
									"",
									"        if (queryIx >= 0) {",
									"            query = querystring.parse(path.slice(queryIx + 1));",
									"            path = path.slice(0, queryIx);",
									"        }",
									"",
									"        this.parsedPath = {",
									"            path: path,",
									"            query: query,",
									"        };",
									"    }",
									"",
									"    formatPath() {",
									"        let path = this.parsedPath.path;",
									"        let query = this.parsedPath.query;",
									"",
									"        if (!query) {",
									"            return path;",
									"        }",
									"",
									"        // Services don't support empty query string keys",
									"        if (query[''] != null) {",
									"            delete query[''];",
									"        }",
									"",
									"        return path + '?' + encodeRfc3986(querystring.stringify(query));",
									"    }",
									"}",
									"",
									"",
									"let signingOptions = {",
									"    method: pm.request.method.toUpperCase(),",
									"    host: pm.request.url.getHost(),",
									"    path: pm.request.url.getPathWithQuery(),",
									"    body: pm.request.body ? pm.request.body.toString() : null,",
									"    headers: pm.request.headers",
									"}",
									"",
									"let updatedReqData = new RequestSigner(signingOptions).sign();",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-date\",",
									"    value: updatedReqData.headers[\"x-fp-date\"]",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"x-fp-signature\",",
									"    value: updatedReqData.headers[\"x-fp-signature\"]",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order Checkout status -200\",()=>{",
									"    pm.response.to.have.status(200);",
									"",
									"})",
									"",
									"const jsonData=pm.response.json();",
									"pm.test(\"Order Placed- Success\",()=>{",
									"    pm.expect(jsonData.success).to.eql(true);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "jiomart-partner.jmpx3.de"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "authorization",
								"value": "Bearer NjJkMDI1NDU2MGEzNTQ1NDFiY2E2MjdlOkZVc2plX1VRQQ=="
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "cookie",
								"value": "{{cookieVar}}"
							},
							{
								"key": "origin",
								"value": "https://jiomart-partner.jmpx3.de"
							},
							{
								"key": "referer",
								"value": "https://jiomart-partner.jmpx3.de/cart/order-review?disable_coupon_validation=false&payment_mode=COD&payment_identifier=COD&aggregator_name=Fynd&merchant_code=COD&cart_id=64c24ae6baaeed7561de4014&address_id=646511c3c58116c4fe2903a7&billing_address_id=645cc80523af899c5d2df8d4"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
							},
							{
								"key": "x-currency-code",
								"value": "INR",
								"disabled": true
							},
							{
								"key": "x-fp-date",
								"value": "20230728T073540Z",
								"disabled": true
							},
							{
								"key": "x-fp-sdk-version",
								"value": "1.1.2",
								"disabled": true
							},
							{
								"key": "x-fp-signature",
								"value": "v1.1:b91d5164fcc97007952a30a159a724c46792e9cd1a751032efd5671befa89c94",
								"disabled": true
							},
							{
								"key": "x-location-detail",
								"value": "{\"country\":\"India\",\"city\":\"Kamothe\",\"pincode\":\"410210\",\"country_iso_code\":\"IND\"}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": \"646511c3c58116c4fe2903a7\",\n    \"billing_address_id\": \"645cc80523af899c5d2df8d4\",\n    \"aggregator\": \"Fynd\",\n    \"payment_mode\": \"COD\",\n    \"meta\": {\n        \"id\": \"63049be9ea3c70f3b4426efd\",\n        \"business_details\": {\n            \"is_completed\": true,\n            \"business_category\": \"9110\",\n            \"gst\": {\n                \"gst_type\": \"unregistered\",\n                \"gst_num\": \"\"\n            },\n            \"business_type\": \"100\",\n            \"business_address\": {\n                \"line1\": \"GALA NO 230\",\n                \"line2\": \"Thane Thane\",\n                \"pincode\": \"421303\",\n                \"district\": \"Thane\",\n                \"state\": \"MAHARASHTRA\",\n                \"state_code\": \"MH\",\n                \"address_id\": \"63073268de9eb1bed87869dc\",\n                \"latitude\": \"12.9662976\",\n                \"longitude\": \"77.545472\"\n            },\n            \"business_legal_name\": \"SAPANA POLYWEAVE PVT LTD\",\n            \"business_shop_name\": \"SAPANA POLYWEAVE PVT LTD\",\n            \"mcc_code\": \"5812\",\n            \"pan_num\": \"BLSPD1600D\"\n        },\n        \"personal_details\": {\n            \"is_completed\": true,\n            \"first_name\": \"Varsha\",\n            \"last_name\": \"V\",\n            \"dob\": \"1995-01-09T00:00:00.000Z\",\n            \"residential_address\": {\n                \"line1\": \"Bus stop\",\n                \"line2\": \"Bus stop\",\n                \"pincode\": \"410210\",\n                \"district\": \"Navi Mumbai\",\n                \"state\": \"MAHARASHTRA\"\n            },\n            \"referred_by\": {\n                \"referred_type\": \"self\"\n            },\n            \"email\": \"varshavishwanath@gofynd.com\",\n            \"is_email_verified\": false,\n            \"merchant_account_details\": {\n                \"AccountNumber\": null,\n                \"IfscCode\": null,\n                \"BeneName\": null\n            },\n            \"phone\": {\n                \"country_code\": \"91\",\n                \"phone_number\": \"9148499899\"\n            }\n        },\n        \"merchant_id\": \"100001000235538\",\n        \"terminal_id\": \"10250904\",\n        \"delivery_slots\": [\n            {\n                \"shipment_id\": \"1690529739341\",\n                \"fc_id\": 337,\n                \"slot_id\": \"R614-DEFAULT-DEFAULT-10:00-12:00\",\n                \"duration\": {\n                    \"from\": \"10:00\",\n                    \"to\": \"12:00\"\n                },\n                \"hub_id\": \"R614\",\n                \"delivery_zone\": null,\n                \"pdd\": \"2023-07-29\"\n            }\n        ]\n    },\n    \"id\": \"64c24ae6baaeed7561de4014\",\n    \"custom_meta\": [\n        {\n            \"key\": \"store_id\",\n            \"value\": \"645cc80551e9f5e164fd397d\"\n        },\n        {\n            \"key\": \"store_name\",\n            \"value\": \"Pooja's cafe\"\n        }\n    ],\n    \"payment_identifier\": \"COD\"\n}"
						},
						"url": {
							"raw": "https://jiomart-partner.jmpx3.de/api/service/application/cart/v1.0/checkout",
							"protocol": "https",
							"host": [
								"jiomart-partner",
								"jmpx3",
								"de"
							],
							"path": [
								"api",
								"service",
								"application",
								"cart",
								"v1.0",
								"checkout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}